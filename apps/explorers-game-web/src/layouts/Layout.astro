---
export interface Props {
  title: string;
  routeProps: RouteProps;
  accessToken: string;
}
import { GlobalStyles } from '@context/GlobalStyles';
import type { RouteProps } from '@explorers-club/schema';
import { ApplicationProvider } from '../components/ApplicationProvider';

const { title, routeProps, accessToken } = Astro.props;

// let deviceId = Astro.cookies.get('deviceId').value;
// let refreshToken = Astro.cookies.get('refreshToken').value;
// let accessToken = Astro.cookies.get('accessToken').value;

// console.log([deviceId, refreshToken, accessToken])

// if (!deviceId) {
//   deviceId = randomUUID();
//   Astro.cookies.set("deviceId", deviceId, {
//     maxAge: 9999999999999
//   });
// }

// if (!refreshToken) {
//   refreshToken = JWT.sign({
//     deviceId
//   }, "my_private_key", {
//     subject: randomUUID(),
//     expiresIn: "30d"
//   })
//   Astro.cookies.set("refreshToken", refreshToken, {
//     maxAge: 30 * 24 * 60 * 60
//   });
// }

// if (!accessToken) {
//   accessToken = JWT.sign({
//     deviceId
//   }, "my_private_key", {
//     subject: randomUUID(),
//     expiresIn: "1d"
//   })
//   Astro.cookies.set("accessToken", accessToken, {
//     maxAge: 24 * 60 * 60
//   });
// }

// const client = createTRPCProxyClient<ApiRouter>({
//   transformer,
//   links: [
//     httpBatchLink({
//       url: import.meta.env.PUBLIC_API_HTTP_SERVER_URL,
//       // You can pass any HTTP headers you wish here
//       async headers() {
//         return {
//           authorization: `Bearer ${refreshToken}`,
//         };
//       },
//     }),
//   ],
// });

// client.connection.initialize.mutate({
//   deviceId,
//   initialRouteProps: routeProps,
//   accessToken,
// });

// if (!accessToken) {
//   let refreshToken = Astro.cookies.get('refreshToken').value;
//   const client = createTRPCProxyClient<ApiRouter>({
//     transformer,
//     links: [
//       httpBatchLink({
//         url: import.meta.env.PUBLIC_API_HTTP_SERVER_URL,
//         // You can pass any HTTP headers you wish here
//         async headers() {
//           return {
//             authorization: `Bearer ${refreshToken}`,
//           };
//         },
//       }),
//     ],
//   });

// try {
//   console.log("requesting")
//   const result = await client.connection.initialize.mutate({
//     deviceId,
//     initialRouteProps: routeProps,
//     refreshToken,
//   });


//   accessToken = result.accessToken;
//   deviceId = result.deviceId;
//   refreshToken = result.refreshToken;

//   Astro.cookies.set("accessToken", accessToken);
//   Astro.cookies.set("deviceId", deviceId);
//   Astro.cookies.set("refreshToken", deviceId);

// } catch (ex) {
//     // todo handle this better
//     console.error(ex);
//   }
// }

// const initializeProps = {
//   initialRouteProps: routeProps,
//   deviceId,
//   authTokens
// }

// try {
//   console.log("requesting")
//   const result = await client.connection.initialize.mutate(initializeProps);
//   console.log("res", result);
// } catch (ex) {
//   // todo handle this better
//   console.error(ex);
// }

// const initialPersistentProps = { deviceId, accessToken, refreshToken };
// const accessToken = "";
---

<!DOCTYPE html>
<html lang="en" style={{ height: '100%' }}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <GlobalStyles />
  </head>

  <body style={{ height: '100%', boxSizing: 'border-box' }}>
    <ApplicationProvider
      client:only
      trpcUrl={`${import.meta.env.PUBLIC_API_WS_SERVER_URL}/?accessToken=${accessToken}`}
      initialRouteProps={routeProps}
    />
    <style is:global>
      {getCssText()}

      :root {
        --accent: 124, 58, 237;
        --accent-gradient: linear-gradient(
          45deg,
          rgb(var(--accent)),
          #da62c4 30%,
          white 60%
        );
      }

      html {
        font-family: system-ui, sans-serif;
      }

      body {
        box-sizing: 'border-box';
      }

      code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
          DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
      }
    </style>
  </body>
</html>
