create table "public"."parties" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid not null default auth.uid(),
    "join_code" character varying,
    "host_actor_id" character varying,
    "is_public" boolean not null default true,
    "last_activity_at" timestamp with time zone not null default now(),
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."parties" enable row level security;

create table "public"."profiles" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null default auth.uid(),
    "player_name" character varying,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."profiles" enable row level security;

CREATE UNIQUE INDEX parties_join_code_key ON public.parties USING btree (join_code);

CREATE UNIQUE INDEX parties_pkey ON public.parties USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

alter table "public"."parties" add constraint "parties_pkey" PRIMARY KEY using index "parties_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."parties" add constraint "parties_join_code_key" UNIQUE using index "parties_join_code_key";

alter table "public"."parties" add constraint "parties_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."parties" validate constraint "parties_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.generate_join_code()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  NEW.join_code := substr(NEW.id::text, 0, 5);
  return NEW;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  insert into public.profiles (user_id)
  values (new.id::uuid);
  return new;
end;
$function$
;

create policy "Enable insert for authenticated users only"
on "public"."parties"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."parties"
as permissive
for select
to public
using ((is_public = true));


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = user_id));


CREATE TRIGGER on_party_created BEFORE INSERT ON public.parties FOR EACH ROW EXECUTE FUNCTION generate_join_code();


