-- alter default privileges in schema public revoke all on tables from supabase_admin,public, anon, authenticated;
-- alter default privileges in schema public revoke all on functions from supabase_admin,public, anon, authenticated;
-- alter default privileges in schema public revoke all on sequences from supabase_admin,public, anon, authenticated;

create table public.profiles (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  player_name character varying,
  created_at timestamp with time zone not null default now()
);

alter table "public"."profiles" enable row level security;

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."profiles" add constraint "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_user_id_fkey";

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = user_id );

-- inserts a row into public.users
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (user_id)
  values (new.id::uuid);
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Ensure users can only write to whitelisted fields
REVOKE INSERT ON profiles FROM public, anon, authenticated;
GRANT INSERT (player_name) ON profiles TO authenticated;

REVOKE UPDATE ON profiles FROM public, anon, authenticated;
GRANT UPDATE (player_name) ON profiles TO authenticated;